"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .campaigncreateworkflowpassthroughfeecardinput import (
    CampaignCreateWorkflowPassThroughFeeCardInput,
    CampaignCreateWorkflowPassThroughFeeCardInputTypedDict,
)
from .campaignworkflowflightinput import (
    CampaignWorkflowFlightInput,
    CampaignWorkflowFlightInputTypedDict,
)
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CampaignCreateWorkflowAdvancedInputTypedDict(TypedDict):
    flights: NotRequired[Nullable[List[CampaignWorkflowFlightInputTypedDict]]]
    purchase_order_number: NotRequired[Nullable[str]]
    include_defaults_from_advertiser: NotRequired[bool]
    pass_through_fee_card: NotRequired[
        CampaignCreateWorkflowPassThroughFeeCardInputTypedDict
    ]


class CampaignCreateWorkflowAdvancedInput(BaseModel):
    flights: OptionalNullable[List[CampaignWorkflowFlightInput]] = UNSET

    purchase_order_number: Annotated[
        OptionalNullable[str], pydantic.Field(alias="purchaseOrderNumber")
    ] = UNSET

    include_defaults_from_advertiser: Annotated[
        Optional[bool], pydantic.Field(alias="includeDefaultsFromAdvertiser")
    ] = None

    pass_through_fee_card: Annotated[
        Optional[CampaignCreateWorkflowPassThroughFeeCardInput],
        pydantic.Field(alias="passThroughFeeCard"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "flights",
            "purchaseOrderNumber",
            "includeDefaultsFromAdvertiser",
            "passThroughFeeCard",
        ]
        nullable_fields = ["flights", "purchaseOrderNumber"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
