"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .enhancednielsenreportingoptions import EnhancedNielsenReportingOptions
from .targetingendage import TargetingEndAge
from .targetinggender import TargetingGender
from .targetingstartage import TargetingStartAge
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import BaseModel, Nullable, UNSET_SENTINEL
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AdGroupNielsenTrackingAttributesInputTypedDict(TypedDict):
    gender: TargetingGender
    start_age: TargetingStartAge
    end_age: TargetingEndAge
    countries: Nullable[List[str]]
    enhanced_reporting_option: NotRequired[EnhancedNielsenReportingOptions]


class AdGroupNielsenTrackingAttributesInput(BaseModel):
    gender: TargetingGender

    start_age: Annotated[TargetingStartAge, pydantic.Field(alias="startAge")]

    end_age: Annotated[TargetingEndAge, pydantic.Field(alias="endAge")]

    countries: Nullable[List[str]]

    enhanced_reporting_option: Annotated[
        Optional[EnhancedNielsenReportingOptions],
        pydantic.Field(alias="enhancedReportingOption"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["enhancedReportingOption"]
        nullable_fields = ["countries"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
