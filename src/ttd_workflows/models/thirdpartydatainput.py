"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .workflowcallbackinput import WorkflowCallbackInput, WorkflowCallbackInputTypedDict
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ThirdPartyDataInputTypedDict(TypedDict):
    r"""Required fields for submitting a bulk job for third party data"""

    partner_id: str
    r"""The partner id to query for."""
    query_shape: NotRequired[Nullable[str]]
    r"""The shape of the query with the fields being asked for, which is sent downstream.
    This determines how the response will look like.
    If this is not provided the default query shape will be used:

    nodes {
    id
    name
    providerId
    providerElementId
    description
    buyable
    fullPath
    activeUniques {
    householdCount
    idsConnectedTvCount
    idsInAppCount
    idsWebCount
    personsCount
    thirdPartyDataOverlapCount
    lastUpdated
    }
    }
    """
    callback_input: NotRequired[WorkflowCallbackInputTypedDict]


class ThirdPartyDataInput(BaseModel):
    r"""Required fields for submitting a bulk job for third party data"""

    partner_id: Annotated[str, pydantic.Field(alias="partnerId")]
    r"""The partner id to query for."""

    query_shape: Annotated[
        OptionalNullable[str], pydantic.Field(alias="queryShape")
    ] = UNSET
    r"""The shape of the query with the fields being asked for, which is sent downstream.
    This determines how the response will look like.
    If this is not provided the default query shape will be used:

    nodes {
    id
    name
    providerId
    providerElementId
    description
    buyable
    fullPath
    activeUniques {
    householdCount
    idsConnectedTvCount
    idsInAppCount
    idsWebCount
    personsCount
    thirdPartyDataOverlapCount
    lastUpdated
    }
    }
    """

    callback_input: Annotated[
        Optional[WorkflowCallbackInput], pydantic.Field(alias="callbackInput")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["queryShape", "callbackInput"]
        nullable_fields = ["queryShape"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
