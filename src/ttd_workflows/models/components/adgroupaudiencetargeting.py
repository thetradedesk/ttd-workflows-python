"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class AdGroupAudienceTargetingTypedDict(TypedDict):
    audience_accelerator_exclusions_enabled: bool
    audience_booster_enabled: bool
    audience_excluder_enabled: bool
    audience_predictor_enabled: bool
    cross_device_vendor_list_for_audience: Nullable[List[int]]
    recency_exclusion_window_in_minutes: int
    target_trackable_users_enabled: bool
    use_mc_id_as_primary: bool
    audience_id: NotRequired[Nullable[str]]


class AdGroupAudienceTargeting(BaseModel):
    audience_accelerator_exclusions_enabled: Annotated[
        bool, pydantic.Field(alias="audienceAcceleratorExclusionsEnabled")
    ]

    audience_booster_enabled: Annotated[
        bool, pydantic.Field(alias="audienceBoosterEnabled")
    ]

    audience_excluder_enabled: Annotated[
        bool, pydantic.Field(alias="audienceExcluderEnabled")
    ]

    audience_predictor_enabled: Annotated[
        bool, pydantic.Field(alias="audiencePredictorEnabled")
    ]

    cross_device_vendor_list_for_audience: Annotated[
        Nullable[List[int]], pydantic.Field(alias="crossDeviceVendorListForAudience")
    ]

    recency_exclusion_window_in_minutes: Annotated[
        int, pydantic.Field(alias="recencyExclusionWindowInMinutes")
    ]

    target_trackable_users_enabled: Annotated[
        bool, pydantic.Field(alias="targetTrackableUsersEnabled")
    ]

    use_mc_id_as_primary: Annotated[bool, pydantic.Field(alias="useMcIdAsPrimary")]

    audience_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="audienceId")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["audienceId"]
        nullable_fields = ["audienceId", "crossDeviceVendorListForAudience"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
