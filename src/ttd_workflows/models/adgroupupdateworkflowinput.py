"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .adgroupassociatebidlistinput import (
    AdGroupAssociateBidListInput,
    AdGroupAssociateBidListInputTypedDict,
)
from .adgroupchannel import AdGroupChannel
from .adgroupfunnellocation import AdGroupFunnelLocation
from .adgrouproigoalinput import AdGroupRoiGoalInput, AdGroupRoiGoalInputTypedDict
from .adgroupupdateadvancedsettingsinput import (
    AdGroupUpdateAdvancedSettingsInput,
    AdGroupUpdateAdvancedSettingsInputTypedDict,
)
from .adgroupupdateaudiencetargetinginput import (
    AdGroupUpdateAudienceTargetingInput,
    AdGroupUpdateAudienceTargetingInputTypedDict,
)
from .adgroupupdatebudgetinput import (
    AdGroupUpdateBudgetInput,
    AdGroupUpdateBudgetInputTypedDict,
)
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AdGroupUpdateWorkflowInputTypedDict(TypedDict):
    id: Nullable[str]
    name: NotRequired[Nullable[str]]
    is_enabled: NotRequired[Nullable[bool]]
    description: NotRequired[Nullable[str]]
    channel: NotRequired[AdGroupChannel]
    funnel_location: NotRequired[AdGroupFunnelLocation]
    budget: NotRequired[AdGroupUpdateBudgetInputTypedDict]
    base_bid_cpm_in_advertiser_currency: NotRequired[Nullable[float]]
    max_bid_cpm_in_advertiser_currency: NotRequired[Nullable[float]]
    audience_targeting: NotRequired[AdGroupUpdateAudienceTargetingInputTypedDict]
    roi_goal: NotRequired[AdGroupRoiGoalInputTypedDict]
    creative_ids: NotRequired[Nullable[List[str]]]
    associated_bid_lists: NotRequired[
        Nullable[List[AdGroupAssociateBidListInputTypedDict]]
    ]
    advanced_settings: NotRequired[AdGroupUpdateAdvancedSettingsInputTypedDict]


class AdGroupUpdateWorkflowInput(BaseModel):
    id: Nullable[str]

    name: OptionalNullable[str] = UNSET

    is_enabled: Annotated[OptionalNullable[bool], pydantic.Field(alias="isEnabled")] = (
        UNSET
    )

    description: OptionalNullable[str] = UNSET

    channel: Optional[AdGroupChannel] = None

    funnel_location: Annotated[
        Optional[AdGroupFunnelLocation], pydantic.Field(alias="funnelLocation")
    ] = None

    budget: Optional[AdGroupUpdateBudgetInput] = None

    base_bid_cpm_in_advertiser_currency: Annotated[
        OptionalNullable[float], pydantic.Field(alias="baseBidCPMInAdvertiserCurrency")
    ] = UNSET

    max_bid_cpm_in_advertiser_currency: Annotated[
        OptionalNullable[float], pydantic.Field(alias="maxBidCPMInAdvertiserCurrency")
    ] = UNSET

    audience_targeting: Annotated[
        Optional[AdGroupUpdateAudienceTargetingInput],
        pydantic.Field(alias="audienceTargeting"),
    ] = None

    roi_goal: Annotated[
        Optional[AdGroupRoiGoalInput], pydantic.Field(alias="roiGoal")
    ] = None

    creative_ids: Annotated[
        OptionalNullable[List[str]], pydantic.Field(alias="creativeIds")
    ] = UNSET

    associated_bid_lists: Annotated[
        OptionalNullable[List[AdGroupAssociateBidListInput]],
        pydantic.Field(alias="associatedBidLists"),
    ] = UNSET

    advanced_settings: Annotated[
        Optional[AdGroupUpdateAdvancedSettingsInput],
        pydantic.Field(alias="advancedSettings"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "isEnabled",
            "description",
            "channel",
            "funnelLocation",
            "budget",
            "baseBidCPMInAdvertiserCurrency",
            "maxBidCPMInAdvertiserCurrency",
            "audienceTargeting",
            "roiGoal",
            "creativeIds",
            "associatedBidLists",
            "advancedSettings",
        ]
        nullable_fields = [
            "id",
            "name",
            "isEnabled",
            "description",
            "baseBidCPMInAdvertiserCurrency",
            "maxBidCPMInAdvertiserCurrency",
            "creativeIds",
            "associatedBidLists",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
