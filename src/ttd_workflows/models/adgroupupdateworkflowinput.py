"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .adgroupupdateworkflowprimaryinput import (
    AdGroupUpdateWorkflowPrimaryInput,
    AdGroupUpdateWorkflowPrimaryInputTypedDict,
)
from .adgroupworkflowadvancedinput import (
    AdGroupWorkflowAdvancedInput,
    AdGroupWorkflowAdvancedInputTypedDict,
)
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import BaseModel, Nullable, UNSET_SENTINEL
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AdGroupUpdateWorkflowInputTypedDict(TypedDict):
    id: Nullable[str]
    primary_input: AdGroupUpdateWorkflowPrimaryInputTypedDict
    advanced_input: NotRequired[AdGroupWorkflowAdvancedInputTypedDict]


class AdGroupUpdateWorkflowInput(BaseModel):
    id: Nullable[str]

    primary_input: Annotated[
        AdGroupUpdateWorkflowPrimaryInput, pydantic.Field(alias="primaryInput")
    ]

    advanced_input: Annotated[
        Optional[AdGroupWorkflowAdvancedInput], pydantic.Field(alias="advancedInput")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["advancedInput"]
        nullable_fields = ["id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
