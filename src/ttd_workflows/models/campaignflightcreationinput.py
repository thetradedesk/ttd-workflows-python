"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing_extensions import Annotated, NotRequired, TypedDict


class CampaignFlightCreationInputTypedDict(TypedDict):
    start_date_inclusive_utc: datetime
    r"""The date and time (in UTC) when the campaign flight is to start spending."""
    budget_in_advertiser_currency: float
    r"""The maximum amount the campaign flight may spend. This must be in the currency of the advertiser that owns the campaign."""
    end_date_exclusive_utc: NotRequired[Nullable[datetime]]
    r"""The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past."""
    budget_in_impressions: NotRequired[Nullable[int]]
    r"""The maximum amount of impressions the campaign flight should buy."""
    daily_target_in_advertiser_currency: NotRequired[Nullable[float]]
    r"""The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign."""
    daily_target_in_impressions: NotRequired[Nullable[int]]
    r"""The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null."""


class CampaignFlightCreationInput(BaseModel):
    start_date_inclusive_utc: Annotated[
        datetime, pydantic.Field(alias="startDateInclusiveUTC")
    ]
    r"""The date and time (in UTC) when the campaign flight is to start spending."""

    budget_in_advertiser_currency: Annotated[
        float, pydantic.Field(alias="budgetInAdvertiserCurrency")
    ]
    r"""The maximum amount the campaign flight may spend. This must be in the currency of the advertiser that owns the campaign."""

    end_date_exclusive_utc: Annotated[
        OptionalNullable[datetime], pydantic.Field(alias="endDateExclusiveUTC")
    ] = UNSET
    r"""The date and time (in UTC) when the campaign flight is to stop spending if it has not yet exhausted its budget. To create or update a campaign flight, you may not set this property value to a date in the past."""

    budget_in_impressions: Annotated[
        OptionalNullable[int], pydantic.Field(alias="budgetInImpressions")
    ] = UNSET
    r"""The maximum amount of impressions the campaign flight should buy."""

    daily_target_in_advertiser_currency: Annotated[
        OptionalNullable[float], pydantic.Field(alias="dailyTargetInAdvertiserCurrency")
    ] = UNSET
    r"""The total amount the campaign flight should spend in a single day, if possible. If you do not want to limit the daily spend, you may set it to null. This must be in the currency of the advertiser that owns the campaign."""

    daily_target_in_impressions: Annotated[
        OptionalNullable[int], pydantic.Field(alias="dailyTargetInImpressions")
    ] = UNSET
    r"""The total amount of impressions the campaign flight should buy in a single day, if possible. If you do not want to limit the daily impressions, you may set it to null."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "endDateExclusiveUTC",
            "budgetInImpressions",
            "dailyTargetInAdvertiserCurrency",
            "dailyTargetInImpressions",
        ]
        nullable_fields = [
            "endDateExclusiveUTC",
            "budgetInImpressions",
            "dailyTargetInAdvertiserCurrency",
            "dailyTargetInImpressions",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
