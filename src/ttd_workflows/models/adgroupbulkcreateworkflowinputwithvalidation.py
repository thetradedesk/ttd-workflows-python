"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .adgroupcreateworkflowinput import (
    AdGroupCreateWorkflowInput,
    AdGroupCreateWorkflowInputTypedDict,
)
from .workflowcallbackinput import WorkflowCallbackInput, WorkflowCallbackInputTypedDict
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AdGroupBulkCreateWorkflowInputWithValidationTypedDict(TypedDict):
    input: Nullable[List[AdGroupCreateWorkflowInputTypedDict]]
    validate_input_only: NotRequired[Nullable[bool]]
    callback_input: NotRequired[WorkflowCallbackInputTypedDict]


class AdGroupBulkCreateWorkflowInputWithValidation(BaseModel):
    input: Nullable[List[AdGroupCreateWorkflowInput]]

    validate_input_only: Annotated[
        OptionalNullable[bool], pydantic.Field(alias="validateInputOnly")
    ] = UNSET

    callback_input: Annotated[
        Optional[WorkflowCallbackInput], pydantic.Field(alias="callbackInput")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["validateInputOnly", "callbackInput"]
        nullable_fields = ["input", "validateInputOnly"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
