"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .budgetworkflow import BudgetWorkflow, BudgetWorkflowTypedDict
from .campaignchanneltype import CampaignChannelType
from .campaignconversionreportingcolumnworkflow import (
    CampaignConversionReportingColumnWorkflow,
    CampaignConversionReportingColumnWorkflowTypedDict,
)
from .campaigncreateroigoalworkflow import (
    CampaignCreateROIGoalWorkflow,
    CampaignCreateROIGoalWorkflowTypedDict,
)
from .customcpatype import CustomCPAType
from datetime import datetime
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CampaignCreateWorkflowPrimaryInputTypedDict(TypedDict):
    advertiser_id: str
    name: str
    primary_channel: CampaignChannelType
    primary_goal: CampaignCreateROIGoalWorkflowTypedDict
    description: NotRequired[Nullable[str]]
    time_zone: NotRequired[Nullable[str]]
    custom_cpa_click_weight: NotRequired[Nullable[float]]
    custom_cpa_viewthrough_weight: NotRequired[Nullable[float]]
    custom_cpa_type: NotRequired[CustomCPAType]
    impressions_only_budgeting_cpm: NotRequired[Nullable[float]]
    budget: NotRequired[BudgetWorkflowTypedDict]
    start_date_in_utc: NotRequired[Nullable[datetime]]
    end_date_in_utc: NotRequired[Nullable[datetime]]
    seed_id: NotRequired[Nullable[str]]
    campaign_conversion_reporting_columns: NotRequired[
        Nullable[List[CampaignConversionReportingColumnWorkflowTypedDict]]
    ]


class CampaignCreateWorkflowPrimaryInput(BaseModel):
    advertiser_id: Annotated[str, pydantic.Field(alias="advertiserId")]

    name: str

    primary_channel: Annotated[
        CampaignChannelType, pydantic.Field(alias="primaryChannel")
    ]

    primary_goal: Annotated[
        CampaignCreateROIGoalWorkflow, pydantic.Field(alias="primaryGoal")
    ]

    description: OptionalNullable[str] = UNSET

    time_zone: Annotated[OptionalNullable[str], pydantic.Field(alias="timeZone")] = (
        UNSET
    )

    custom_cpa_click_weight: Annotated[
        OptionalNullable[float], pydantic.Field(alias="customCPAClickWeight")
    ] = UNSET

    custom_cpa_viewthrough_weight: Annotated[
        OptionalNullable[float], pydantic.Field(alias="customCPAViewthroughWeight")
    ] = UNSET

    custom_cpa_type: Annotated[
        Optional[CustomCPAType], pydantic.Field(alias="customCPAType")
    ] = None

    impressions_only_budgeting_cpm: Annotated[
        OptionalNullable[float], pydantic.Field(alias="impressionsOnlyBudgetingCpm")
    ] = UNSET

    budget: Optional[BudgetWorkflow] = None

    start_date_in_utc: Annotated[
        OptionalNullable[datetime], pydantic.Field(alias="startDateInUtc")
    ] = UNSET

    end_date_in_utc: Annotated[
        OptionalNullable[datetime], pydantic.Field(alias="endDateInUtc")
    ] = UNSET

    seed_id: Annotated[OptionalNullable[str], pydantic.Field(alias="seedId")] = UNSET

    campaign_conversion_reporting_columns: Annotated[
        OptionalNullable[List[CampaignConversionReportingColumnWorkflow]],
        pydantic.Field(alias="campaignConversionReportingColumns"),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "timeZone",
            "customCPAClickWeight",
            "customCPAViewthroughWeight",
            "customCPAType",
            "impressionsOnlyBudgetingCpm",
            "budget",
            "startDateInUtc",
            "endDateInUtc",
            "seedId",
            "campaignConversionReportingColumns",
        ]
        nullable_fields = [
            "description",
            "timeZone",
            "customCPAClickWeight",
            "customCPAViewthroughWeight",
            "impressionsOnlyBudgetingCpm",
            "startDateInUtc",
            "endDateInUtc",
            "seedId",
            "campaignConversionReportingColumns",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
