"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .customroasconfig import CustomROASConfig, CustomROASConfigTypedDict
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CampaignConversionReportingColumnWorkflowTypedDict(TypedDict):
    tracking_tag_id: str
    include_in_custom_cpa: bool
    reporting_column_id: int
    roas_config: NotRequired[CustomROASConfigTypedDict]
    weight: NotRequired[Nullable[float]]
    cross_device_attribution_model_id: NotRequired[Nullable[str]]


class CampaignConversionReportingColumnWorkflow(BaseModel):
    tracking_tag_id: Annotated[str, pydantic.Field(alias="trackingTagId")]

    include_in_custom_cpa: Annotated[bool, pydantic.Field(alias="includeInCustomCPA")]

    reporting_column_id: Annotated[int, pydantic.Field(alias="reportingColumnId")]

    roas_config: Annotated[
        Optional[CustomROASConfig], pydantic.Field(alias="ROASConfig")
    ] = None

    weight: OptionalNullable[float] = UNSET

    cross_device_attribution_model_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="crossDeviceAttributionModelId")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["ROASConfig", "weight", "crossDeviceAttributionModelId"]
        nullable_fields = ["weight", "crossDeviceAttributionModelId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
