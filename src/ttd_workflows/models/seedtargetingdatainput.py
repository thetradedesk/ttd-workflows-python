"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .contextualdatainput import ContextualDataInput, ContextualDataInputTypedDict
from .thirdpartydatainput import ThirdPartyDataInput, ThirdPartyDataInputTypedDict
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SeedTargetingDataInputTypedDict(TypedDict):
    first_party_data_inclusion_ids: NotRequired[Nullable[List[int]]]
    r"""These are the AdvertiserTargetingDataIds for first party data."""
    retail_data_inclusion: NotRequired[Nullable[List[ThirdPartyDataInputTypedDict]]]
    r"""RetailDataInclusion"""
    third_party_data_inclusion: NotRequired[
        Nullable[List[ThirdPartyDataInputTypedDict]]
    ]
    r"""ThirdPartyDataInclusion"""
    contextual_inclusion: NotRequired[ContextualDataInputTypedDict]
    country_filter_ids: NotRequired[Nullable[List[str]]]
    r"""CountryFilterIds"""


class SeedTargetingDataInput(BaseModel):
    first_party_data_inclusion_ids: Annotated[
        OptionalNullable[List[int]], pydantic.Field(alias="firstPartyDataInclusionIds")
    ] = UNSET
    r"""These are the AdvertiserTargetingDataIds for first party data."""

    retail_data_inclusion: Annotated[
        OptionalNullable[List[ThirdPartyDataInput]],
        pydantic.Field(alias="retailDataInclusion"),
    ] = UNSET
    r"""RetailDataInclusion"""

    third_party_data_inclusion: Annotated[
        OptionalNullable[List[ThirdPartyDataInput]],
        pydantic.Field(alias="thirdPartyDataInclusion"),
    ] = UNSET
    r"""ThirdPartyDataInclusion"""

    contextual_inclusion: Annotated[
        Optional[ContextualDataInput], pydantic.Field(alias="contextualInclusion")
    ] = None

    country_filter_ids: Annotated[
        OptionalNullable[List[str]], pydantic.Field(alias="countryFilterIds")
    ] = UNSET
    r"""CountryFilterIds"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "firstPartyDataInclusionIds",
            "retailDataInclusion",
            "thirdPartyDataInclusion",
            "contextualInclusion",
            "countryFilterIds",
        ]
        nullable_fields = [
            "firstPartyDataInclusionIds",
            "retailDataInclusion",
            "thirdPartyDataInclusion",
            "countryFilterIds",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
