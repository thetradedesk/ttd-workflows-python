"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .allocationtype import AllocationType
from .decimalnullableworkflowsoptional import (
    DecimalNullableWorkflowsOptional,
    DecimalNullableWorkflowsOptionalTypedDict,
)
from .int64nullableworkflowsoptional import (
    Int64NullableWorkflowsOptional,
    Int64NullableWorkflowsOptionalTypedDict,
)
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AdGroupUpdateBudgetInputTypedDict(TypedDict):
    allocation_type: NotRequired[AllocationType]
    budget_in_advertiser_currency: NotRequired[Nullable[float]]
    budget_in_impressions: NotRequired[Int64NullableWorkflowsOptionalTypedDict]
    daily_target_in_advertiser_currency: NotRequired[
        DecimalNullableWorkflowsOptionalTypedDict
    ]
    daily_target_in_impressions: NotRequired[Int64NullableWorkflowsOptionalTypedDict]


class AdGroupUpdateBudgetInput(BaseModel):
    allocation_type: Annotated[
        Optional[AllocationType], pydantic.Field(alias="allocationType")
    ] = None

    budget_in_advertiser_currency: Annotated[
        OptionalNullable[float], pydantic.Field(alias="budgetInAdvertiserCurrency")
    ] = UNSET

    budget_in_impressions: Annotated[
        Optional[Int64NullableWorkflowsOptional],
        pydantic.Field(alias="budgetInImpressions"),
    ] = None

    daily_target_in_advertiser_currency: Annotated[
        Optional[DecimalNullableWorkflowsOptional],
        pydantic.Field(alias="dailyTargetInAdvertiserCurrency"),
    ] = None

    daily_target_in_impressions: Annotated[
        Optional[Int64NullableWorkflowsOptional],
        pydantic.Field(alias="dailyTargetInImpressions"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "allocationType",
            "budgetInAdvertiserCurrency",
            "budgetInImpressions",
            "dailyTargetInAdvertiserCurrency",
            "dailyTargetInImpressions",
        ]
        nullable_fields = ["budgetInAdvertiserCurrency"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
