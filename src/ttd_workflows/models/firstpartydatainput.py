"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from ttd_workflows.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing_extensions import Annotated, NotRequired, TypedDict


class FirstPartyDataInputTypedDict(TypedDict):
    r"""Required fields for submitting a bulk job for first party data"""

    advertiser_id: str
    r"""The advertiser id to query for."""
    name_filter: NotRequired[Nullable[str]]
    r"""The name to filter by in the query. This filter will be applied to the results for the advertiser.
    If there are no nodes which match the filter, a response with empty nodes with no first party data will be returned.
    """
    query_shape: NotRequired[Nullable[str]]
    r"""The shape of the query with the fields being asked for, which is sent downstream.
    This determines how the response will look like.
    If this is not provided the default query shape will be used:

    nodes {
    name
    id
    activeUniques {
    householdCount
    idsConnectedTvCount
    idsCount
    idsInAppCount
    idsWebCount
    personsCount
    }
    }
    """


class FirstPartyDataInput(BaseModel):
    r"""Required fields for submitting a bulk job for first party data"""

    advertiser_id: Annotated[str, pydantic.Field(alias="advertiserId")]
    r"""The advertiser id to query for."""

    name_filter: Annotated[
        OptionalNullable[str], pydantic.Field(alias="nameFilter")
    ] = UNSET
    r"""The name to filter by in the query. This filter will be applied to the results for the advertiser.
    If there are no nodes which match the filter, a response with empty nodes with no first party data will be returned.
    """

    query_shape: Annotated[
        OptionalNullable[str], pydantic.Field(alias="queryShape")
    ] = UNSET
    r"""The shape of the query with the fields being asked for, which is sent downstream.
    This determines how the response will look like.
    If this is not provided the default query shape will be used:

    nodes {
    name
    id
    activeUniques {
    householdCount
    idsConnectedTvCount
    idsCount
    idsInAppCount
    idsWebCount
    personsCount
    }
    }
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["nameFilter", "queryShape"]
        nullable_fields = ["nameFilter", "queryShape"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
